{
    "version": "https://jsonfeed.org/version/1",
    "title": "黑色天际线的博客空间",
    "subtitle": "天高路远，逆水行云",
    "icon": "https://github.com/Black-Skyline/Black-Skyline.github.io/images/favicon.ico",
    "description": "此博客空间为个人学习笔记上传处",
    "home_page_url": "https://github.com/Black-Skyline/Black-Skyline.github.io",
    "items": [
        {
            "id": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/11/03/Python/%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%EF%BC%88py%EF%BC%89/",
            "url": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/11/03/Python/%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%EF%BC%88py%EF%BC%89/",
            "title": "第三次课后作业（py）",
            "date_published": "2022-11-02T16:45:35.000Z",
            "content_html": "<ul>\n<li>\n<p><em>@author</em> <em>xunguang (<span class=\"exturl\" data-url=\"bWFpbHRvOnh1bmd1YW5nQGJsYWNrLXNreWxpbmUuZ2l0aHViLmlv\">xunguang@black-skyline.github.io</span>)</em></p>\n<p><em>@brief</em></p>\n<p><em>@version</em> <em>0.1</em></p>\n<p><em>@date</em> <em>2022-11-03</em></p>\n<p><em>@copyright</em> <em>Copyright (c) 2022</em></p>\n<h1 id=\"level-0\"><a class=\"anchor\" href=\"#level-0\">#</a> level 0</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"level-1\"><a class=\"anchor\" href=\"#level-1\">#</a> level 1</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">showHand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    list_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    res <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> res <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        string <span class=\"token operator\">=</span> <span class=\"token string\">\"石头\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">elif</span> res <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        string <span class=\"token operator\">=</span> <span class=\"token string\">\"剪刀\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        string <span class=\"token operator\">=</span> <span class=\"token string\">\"布\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    list_a<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    list_a<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> list_a</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Choice</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    rock <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    scissors <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    paper <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>personHand <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>machineHand <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>personWinCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>machineWinCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>game_times <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    game_times <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"第 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>game_times<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 局游戏\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.石头  2.剪刀  3.布\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        temp <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择你要怎么出（输入数字）：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> temp<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            personHand <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            personHand <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 必要的初始化</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> personHand <span class=\"token keyword\">in</span> Choice<span class=\"token punctuation\">.</span>value2member_map_<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入不正确，请重新输入;\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    list_b <span class=\"token operator\">=</span> showHand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    machineHand <span class=\"token operator\">=</span> list_b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"电脑选择出</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>list_b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>personHand <span class=\"token operator\">-</span> machineHand<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>personHand <span class=\"token operator\">-</span> machineHand<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        personWinCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这一局你赢了\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">elif</span> personHand <span class=\"token operator\">==</span> machineHand<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这一局平局\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        tem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>personHand <span class=\"token operator\">-</span> machineHand<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        machineWinCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这一局电脑赢了\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">if</span> personWinCount <span class=\"token operator\">>=</span> <span class=\"token number\">3</span> <span class=\"token keyword\">or</span> machineWinCount <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"截止目前，共进行了 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>game_times<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 局游戏,你赢了 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>personWinCount<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 局，电脑赢了 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>machineWinCount<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 局\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">if</span> personWinCount <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你获得了游戏胜利\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"电脑获得了游戏胜利\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></table></figure><h1 id=\"level-2\"><a class=\"anchor\" href=\"#level-2\">#</a> level 2</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">*</span> @<span class=\"token builtin\">file</span> mod<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">*</span> @author xunguang <span class=\"token punctuation\">(</span>xunguang@black<span class=\"token operator\">-</span>skyline<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">*</span> @brief </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">*</span> @version <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">*</span> @date <span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">31</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">*</span> @parameter name_parameter</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">*</span> @copyright Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2022</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">beautiful</span><span class=\"token punctuation\">(</span>name_parameter<span class=\"token operator\">=</span><span class=\"token string\">\"hysj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name_parameter <span class=\"token operator\">+</span> <span class=\"token string\">\" is beautiful\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    beautiful<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">**</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token operator\">*</span> @<span class=\"token builtin\">file</span> test<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token operator\">*</span> @author xunguang <span class=\"token punctuation\">(</span>xunguang@black<span class=\"token operator\">-</span>skyline<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token operator\">*</span> @brief </pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token operator\">*</span> @version <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token operator\">*</span> @date <span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">31</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token operator\">*</span> @parameter</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token operator\">*</span> @copyright Copyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2022</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> beautiful</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    beautiful<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"level-3\"><a class=\"anchor\" href=\"#level-3\">#</a> level 3</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> fake_useragent <span class=\"token keyword\">import</span> UserAgent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> datetime <span class=\"token keyword\">as</span> dt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://t.weather.sojson.com/api/weather/city/101040100\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>url_2 <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.weather.com.cn/weather/101040100.shtml\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span> UserAgent<span class=\"token punctuation\">(</span>verify_ssl<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>1.爬网页写</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url_2<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>response<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>apparent_encoding  <span class=\"token comment\"># response.encoding = 'utf-8'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">RegularMatching</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># name_format = re.compile(r\" \")</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    date_format <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"&lt;h1>([0-9]+?.*?)&lt;/h1>\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    weather_format <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'class=\"wea\">(.*?)&lt;/p'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    top_tem_format <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"&lt;span>([0-9]+?)&lt;/span>\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    low_tem_format <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"&lt;i>([0-9]+?).&lt;/i>\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PrintResult<span class=\"token punctuation\">(</span>date_format<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    PrintResult<span class=\"token punctuation\">(</span>weather_format<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    PrintResult<span class=\"token punctuation\">(</span>low_tem_format<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> top_tem_format<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    Tips<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">PrintResult</span><span class=\"token punctuation\">(</span>list_1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> list_2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> list_2 <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10s\\t\"</span> <span class=\"token operator\">%</span> list_1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            string <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;0&#125;°C ~ &#123;1&#125;°C\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> list_2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-12s\\t\"</span> <span class=\"token operator\">%</span> string<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Tips</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    tip_format <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"&lt;i>([0-9]&#123;4&#125;[-].*?)&lt;/i>\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    tip_form <span class=\"token operator\">=</span> <span class=\"token string\">\"数据来源:中央气象台\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> tip_form <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">,</span> tip_format<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    now_time <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%F %T\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前时间: \"</span><span class=\"token punctuation\">,</span> now_time<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>RegularMatching<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>2.调用api写</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"forecast\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    date <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span><span class=\"token string\">\"ymd\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    tag <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span><span class=\"token string\">\"week\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    top_temper <span class=\"token operator\">=</span> <span class=\"token string\">\"最\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">[</span><span class=\"token string\">\"high\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    low_temper <span class=\"token operator\">=</span> <span class=\"token string\">\"最\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">[</span><span class=\"token string\">\"low\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    sunrise_time <span class=\"token operator\">=</span> <span class=\"token string\">\"预计日出时间\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">[</span><span class=\"token string\">\"sunrise\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    sunset_time <span class=\"token operator\">=</span> <span class=\"token string\">\"预计日落时间\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">[</span><span class=\"token string\">\"sunset\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    info <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;0:&lt;&#125;——&#123;1:&lt;&#125;:\\t&#123;4:&lt;&#125;\\n&#123;2:&lt;&#125;\\t&#123;3:&lt;&#125;\\n&#123;5:&lt;&#125;\\t&#123;6:&lt;&#125;\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        date<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> top_temper<span class=\"token punctuation\">,</span> low_temper<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> sunrise_time<span class=\"token punctuation\">,</span> sunset_time</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"level-4基于github上的stable-diffusion-web-ui-开源项目的图片生成windows系统\"><a class=\"anchor\" href=\"#level-4基于github上的stable-diffusion-web-ui-开源项目的图片生成windows系统\">#</a> level 4—— 基于 GitHub 上的 Stable Diffusion web UI 开源项目的图片生成（Windows 系统）</h1>\n<blockquote>\n<h4 id=\"写在前面的话\"><a class=\"anchor\" href=\"#写在前面的话\">#</a> 写在前面的话：</h4>\n<p>先说些悲伤的事 —— 咱家是 AMD 核显，No NVIDIA 显卡（矿老板、黄牛贩子、皮衣黄 Fxxk you・・・），so CUDA 应该是不行了（不过可以用一些其他手段搞到一个能用的 NV 驱动看能不能欺骗一下 CUDA），现在只能试试看 pytorch-cpu 能不能跑 Stable Diffusion web UI 的 AI 算法模型・・・</p>\n<h3 id=\"应需求对原来的代码命令行的启动启动方式作出一些优化并给出点击自动启动的方式配置对应不同的配置过程\"><a class=\"anchor\" href=\"#应需求对原来的代码命令行的启动启动方式作出一些优化并给出点击自动启动的方式配置对应不同的配置过程\">#</a> 应需求对原来的 “代码 + 命令行” 的启动启动方式作出一些优化，并给出点击自动启动的方式配置：（对应不同的配置过程）</h3>\n<h2 id=\"方式一代码命令行的启动默认已有git\"><a class=\"anchor\" href=\"#方式一代码命令行的启动默认已有git\">#</a> 方式一：“代码 + 命令行” 的启动（默认已有 git）</h2>\n<h2 id=\"方式二点击启动默认已有python3环境和git\"><a class=\"anchor\" href=\"#方式二点击启动默认已有python3环境和git\">#</a> 方式二：点击启动（默认已有 python3 环境和 git）</h2>\n</blockquote>\n<h1 id=\"方式一配置过程\"><a class=\"anchor\" href=\"#方式一配置过程\">#</a> 方式一配置过程：</h1>\n<h2 id=\"一-为ai深度学习准备的环境配置默认已有python3环境\"><a class=\"anchor\" href=\"#一-为ai深度学习准备的环境配置默认已有python3环境\">#</a> 一、为 AI 深度学习准备的环境配置 —— 默认已有 python3 环境</h2>\n<h3 id=\"可选择安装anacondapython的包管理和环境管理器\"><a class=\"anchor\" href=\"#可选择安装anacondapython的包管理和环境管理器\">#</a> （<em>可选择安装</em>）Anaconda——python 的包管理和环境管理器</h3>\n<blockquote>\n<h4 id=\"注安装使用anaconda就默认使用方式一代码命令行进行启动\"><a class=\"anchor\" href=\"#注安装使用anaconda就默认使用方式一代码命令行进行启动\">#</a> 注：安装使用 Anaconda 就默认使用方式一：“代码 + 命令行” 进行启动</h4>\n</blockquote>\n<h4 id=\"q为什么要安这个觉得不需要可以不安\"><a class=\"anchor\" href=\"#q为什么要安这个觉得不需要可以不安\">#</a> Q：为什么要安这个？（觉得不需要可以不安）</h4>\n<h4 id=\"a方便配置py的虚拟编译环境降低python各种库的试错成本和学习尝试风险\"><a class=\"anchor\" href=\"#a方便配置py的虚拟编译环境降低python各种库的试错成本和学习尝试风险\">#</a> A：方便配置 py 的虚拟编译环境，<strong>降低</strong> python 各种库的<strong>试错成本</strong>和学习尝试风险</h4>\n<h4 id=\"q怎么安\"><a class=\"anchor\" href=\"#q怎么安\">#</a> Q：怎么安？</h4>\n<h5 id=\"a官网anaconda-anaconda-distribution下载安装太慢啦或国内镜像软件源下载安装快例如清华的镜像站index-of-anacondaarchive-清华大学开源软件镜像站-tsinghua-open-source-mirror\"><a class=\"anchor\" href=\"#a官网anaconda-anaconda-distribution下载安装太慢啦或国内镜像软件源下载安装快例如清华的镜像站index-of-anacondaarchive-清华大学开源软件镜像站-tsinghua-open-source-mirror\">#</a> A：[官网](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL3Byb2R1Y3RzLw==\">Anaconda | Anaconda Distribution</span>) 下载安装（太慢啦）或国内镜像软件源下载安装（快）例如 [清华的镜像站](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2FuYWNvbmRhL2FyY2hpdmUv\">Index of /anaconda/archive/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</span>)</h5>\n<h5 id=\"注\"><a class=\"anchor\" href=\"#注\">#</a> 注：</h5>\n<ul>\n<li>\n<h6 id=\"官网下载点击之后可能会跳转订阅注册页面此时需要-鼠标右击下载按钮选择在新标签页中打开就可以直接下载了\"><a class=\"anchor\" href=\"#官网下载点击之后可能会跳转订阅注册页面此时需要-鼠标右击下载按钮选择在新标签页中打开就可以直接下载了\">#</a> 官网下载点击之后可能会跳转订阅注册页面，此时需要  鼠标右击下载按钮 —&gt; 选择在新标签页中打开就可以直接下载了</h6>\n</li>\n<li>\n<h6 id=\"在镜像站下载要注意版本问题一般根据不同项的名称和上传时间确认\"><a class=\"anchor\" href=\"#在镜像站下载要注意版本问题一般根据不同项的名称和上传时间确认\">#</a> 在镜像站下载要注意版本问题，一般根据不同项的名称和上传时间确认</h6>\n</li>\n<li>\n<h6 id=\"本人选择的是anaconda3-202210-windows-x86_64exe-可执行安装程序\"><a class=\"anchor\" href=\"#本人选择的是anaconda3-202210-windows-x86_64exe-可执行安装程序\">#</a> 本人选择的是 Anaconda3-2022.10-Windows-x86_64.exe (可执行安装程序)</h6>\n</li>\n<li>\n<h6 id=\"安装时记住安装的位置最好不要放c盘\"><a class=\"anchor\" href=\"#安装时记住安装的位置最好不要放c盘\">#</a> 安装时记住安装的位置，最好不要放 C 盘</h6>\n</li>\n<li>\n<h6 id=\"安装时最好勾选上自动把anaconda添加进path系统环境变量里\"><a class=\"anchor\" href=\"#安装时最好勾选上自动把anaconda添加进path系统环境变量里\">#</a> 安装时最好勾选上自动把 anaconda 添加进 PATH（系统环境变量）里</h6>\n</li>\n<li>\n<h6 id=\"安装完成后在cmd里输入conda-list-检查安装是否成功\"><a class=\"anchor\" href=\"#安装完成后在cmd里输入conda-list-检查安装是否成功\">#</a> 安装完成后在 cmd 里输入 <code>conda list</code>  检查安装是否成功</h6>\n</li>\n</ul>\n<h6 id=\"另外安装好anaconda后我们可以搭建一个简单的-非系统path下的py编译环境\"><a class=\"anchor\" href=\"#另外安装好anaconda后我们可以搭建一个简单的-非系统path下的py编译环境\">#</a> 另外，安装好 anaconda 后，我们可以搭建一个简单的、非系统 PATH 下的 py 编译环境：</h6>\n<ol>\n<li>\n<p>先对 Anaconda 进行换源，具体详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvYW5hY29uZGEv\"> anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</span>（换源就是换一个下载来源，这里我们换的那几个都是国内有名的源，完全是免费的）</p>\n<h6 id=\"ps建议能换就换不然默认的源是国外网址下东西慢还不稳定稍微下个大点的东西就超时报错\"><a class=\"anchor\" href=\"#ps建议能换就换不然默认的源是国外网址下东西慢还不稳定稍微下个大点的东西就超时报错\">#</a> PS：建议能换就换，不然默认的源是国外网址（下东西慢还不稳定，稍微下个大点的东西就超时报错・・・）</h6>\n</li>\n<li>\n<p>打开<strong> cmd</strong> 窗口或者 “<strong>Anaconda Prompt</strong>” 程序或者 “<strong>Anaconda Powershell Prompt</strong>” 程序（</p>\n</li>\n<li>\n<p>使用 “ <code>conda create -n 环境名 python=版本号 -y</code> ” 格式的命令新建一个 py 编译环境，例如：使用</p>\n<p><code>conda create -n pytorch_env python=3.10.6 -y</code>  （做演示用），</p>\n<p><code>conda create -n novelai python=3.10.6 -y</code> （等下在这个环境里操作）,</p>\n<p>在创建过程中遇到问 y/n 输入 y 即可</p>\n<blockquote>\n<h6 id=\"注python版本最好是3106或大于这个版本号因为项目的建议就是3106\"><a class=\"anchor\" href=\"#注python版本最好是3106或大于这个版本号因为项目的建议就是3106\">#</a> 注：python 版本最好是 3.10.6 或大于这个版本号，因为项目的建议就是 3.10.6</h6>\n</blockquote>\n</li>\n<li>\n<p>创建完成后，输入命令 <code>conda env list</code> ，显示现有的环境（前面是新建时取的环境名字，后面是环境所在文件路径，base 是默认自带的）：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>D:\\Program\\Anaconda\\my_envs>conda env list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre># conda environments:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>base                     D:\\Program\\Anaconda</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>novelai                  D:\\Program\\Anaconda\\envs\\novelai</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pytorch_env              D:\\Program\\Anaconda\\envs\\pytorch_env</pre></td></tr></table></figure><blockquote>\n<h6 id=\"注自己创建的非base的环境的文件夹都会统一放在anaconda文件夹里的envs文件夹内\"><a class=\"anchor\" href=\"#注自己创建的非base的环境的文件夹都会统一放在anaconda文件夹里的envs文件夹内\">#</a> 注：自己创建的非 base 的环境的文件夹，都会统一放在 Anaconda 文件夹里的 envs 文件夹内</h6>\n</blockquote>\n</li>\n<li>\n<p>在这里提前<strong>给 pip 换源</strong>，不然之后在下载东西时会体验到什么是折磨・・・</p>\n<p>首先激活 novelai 环境（在这个环境里安装依赖）：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda activate novelai</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 激活成功后显示：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>(novelai) 当前目录></pre></td></tr></table></figure><p>然后直接粘贴下面的命令给 pip 换源（换的是清华源，pip 暂时不要用阿里源，因为更新缓慢・・・）</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"必安pytorch\"><a class=\"anchor\" href=\"#必安pytorch\">#</a> （<em>必安</em>）Pytorch</h3>\n<blockquote>\n<h4 id=\"注pytorch是这个项目能跑起来的必要依赖库之一理论上可以等下和其他依赖库一起安装但是在那个时候安装的pytorch不一定是cpu版核显佬的哭泣所以建议提前安装好cpu版的\"><a class=\"anchor\" href=\"#注pytorch是这个项目能跑起来的必要依赖库之一理论上可以等下和其他依赖库一起安装但是在那个时候安装的pytorch不一定是cpu版核显佬的哭泣所以建议提前安装好cpu版的\">#</a> 注：pytorch 是这个项目能跑起来的必要依赖库之一，理论上可以等下和其他依赖库一起安装，但是在那个时候安装的 Pytorch 不一定是 CPU 版（核显佬的哭泣・・・），所以建议提前安装好 CPU 版的</h4>\n</blockquote>\n<h4 id=\"获取安装命令\"><a class=\"anchor\" href=\"#获取安装命令\">#</a> 获取安装命令</h4>\n<p>这个玩意通过命令行安装，，具体命令可以百度看博客，也可以直接到 [官网](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRvcmNoLm9yZy9nZXQtc3RhcnRlZC9sb2NhbGx5Lw==\">Start Locally | PyTorch</span>) 根据个人使用平台查看最新安装命令（到官网后，进入”Get Started“下，下拉到如下图的 page 页面并根据个人平台选择）<img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211012107230.png\" alt=\"image-20221101210752130\" />,</p>\n<ol>\n<li>上图第一行”<strong>PyTorch Build</strong>“的三个选项分别是 Stable（<em><strong>稳定版</strong></em>）、Preview（<em><strong>先行测试版</strong></em>）、LTS（<em><strong>长期支持版</strong></em>），选择第一个和第三个都无所谓，但不推荐选第二个</li>\n<li>上图第二行”<strong>Your OS</strong>“选择本机操作系统就行</li>\n<li>上图第三行”<strong>Package</strong>“，选择用那个包管理工具（平台）进行安装，分别是 Conda（<em><strong>Anaconda 命令行包安装工具</strong></em>）、Pip（<em><strong>Python 自带的包安装工具</strong></em>）、LibTorch（不知道，<em><strong>应该和 Torch 本身的安装工具有关</strong></em>）、Source（直接在 github 上下载 pytorch 的代码，然后自己 setup，<strong>小白别用</strong>）</li>\n<li>上图第四行”<strong>Language</strong>“，选 python，毕竟除了某些特殊群体，一般没谁会傻到用 Java 跑 AI 深度学习吧・・・</li>\n<li>上图第五行”<strong>Computer Platform</strong>“，选择用什么编程算法软件跑，<strong>前两个 CUDA 项</strong>是皮衣黄家的显卡可以使用的平台软件版本（Windows、Linux、Mac 都可以下载到 CUDA，但老黄对 Linux 的驱动支持那可真是一绝啊～滑稽），<strong>第三个项 ROCm</strong> 是 AMD 为了”<em><strong> 对标</strong></em> “CUDA 出的一个机器学习库，但由于各种原因，** 只能在 Linux 上跑，** 而且问题比较多，支持的型号比较少（有得用就不错了），<strong>最后一个 CPU 项</strong>，顾名思义，就是给我这样的倒霉蛋用的让 cpu 来跑机器学习的选择，比较欣慰的是，前三项要匹配库与 pytorch 的版本，但 CPU 项不需要（还算一点安慰）</li>\n<li>上图最后一行，根据前面的做出选择给出的最新下载命令，直接 cv 到  上面选择的 Package 对应的工具里下载</li>\n</ol>\n<h4 id=\"进行安装\"><a class=\"anchor\" href=\"#进行安装\">#</a> 进行安装</h4>\n<h5 id=\"用pip安装\"><a class=\"anchor\" href=\"#用pip安装\">#</a> 用 pip 安装</h5>\n<p>总的来说，通过 pip 安装最简单，直接随便找个命令行把下面的命令输入在上面，然后回车就行</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 install torch torchvision torchaudio</pre></td></tr></table></figure><h5 id=\"用conda安装\"><a class=\"anchor\" href=\"#用conda安装\">#</a> 用 conda 安装</h5>\n<p>为了降低试错风险，方便包管理，使用<strong> Anaconda Prompt 命令行</strong>进入在 Anaconda 里创建的自定义环境来安装 pytorch：</p>\n<ol>\n<li>\n<p>进入<strong> Anaconda Prompt</strong> 程序，（<strong>不是 cmd</strong>），然后进入提前准备好的 py 环境（最好是 python 3.10.6），（没有就建一个：  <code>conda create -n novelai python==3.10.6</code> ）, 在命令行里输入 <code>conda activate novelai</code> ，出现如下提示则表示激活成功：（完成激活后再进行下一步）</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>(novelai) D:\\Program\\Anaconda\\my_envs></pre></td></tr></table></figure><blockquote>\n<h6 id=\"其中novelai-是py环境名后面是工作目录这里的这个功罪目录随意\"><a class=\"anchor\" href=\"#其中novelai-是py环境名后面是工作目录这里的这个功罪目录随意\">#</a> 其中， <code>(novelai)</code>  是 py 环境名，后面是工作目录 (这里的这个功罪目录随意)，</h6>\n</blockquote>\n</li>\n<li>\n<p>把 pytorch 官网使用 conda 下载的命令粘贴进 Anaconda Prompt 已经激活完成的 python 3.10.6 环境里：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211020044891.png\" alt=\"image-20221102004450723\" /></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda install pytorch torchvision torchaudio cpuonly</pre></td></tr></table></figure><p>回车后等待安装相关依赖和包，有问<strong> y/n</strong> 的一律选 y</p>\n</li>\n<li>\n<p>等待安装完成后，输入 <code>python</code>  进入交互模式，在该模式下依次输入：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>若最后的效果图呈现如下，则表示成功：（否则重新执行第 2 步 pytorch 的下载）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>novelai<span class=\"token punctuation\">)</span> D<span class=\"token punctuation\">:</span>\\Program\\Anaconda\\my_envs<span class=\"token operator\">></span>python</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Python <span class=\"token number\">3.10</span><span class=\"token number\">.6</span> <span class=\"token operator\">|</span> packaged by conda<span class=\"token operator\">-</span>forge <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">,</span> Oct <span class=\"token number\">24</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token number\">02</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>MSC v<span class=\"token punctuation\">.</span><span class=\"token number\">1916</span> <span class=\"token number\">64</span> bit <span class=\"token punctuation\">(</span>AMD64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> on win32</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Type <span class=\"token string\">\"help\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"copyright\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"credits\"</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"license\"</span> <span class=\"token keyword\">for</span> more information<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1.13</span><span class=\"token number\">.0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"二-开始stable-diffusion-web-ui项目文件的配置\"><a class=\"anchor\" href=\"#二-开始stable-diffusion-web-ui项目文件的配置\">#</a> 二、开始 Stable Diffusion web UI 项目文件的配置</h2>\n<ol>\n<li>\n<h5 id=\"下载novalai模型训练文件点击此处-文件很大大大\"><a class=\"anchor\" href=\"#下载novalai模型训练文件点击此处-文件很大大大\">#</a> 下载 NovalAI<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUJKLTVabzdGbkN4aDdlekp0WUVxSWc/cHdkPWphY2s=\"> 模型训练文件 (点击此处)</span> (文件很大大大・・・・・・)</h5>\n</li>\n<li>\n<h5 id=\"获取stable-diffusion-web-ui项目源代码\"><a class=\"anchor\" href=\"#获取stable-diffusion-web-ui项目源代码\">#</a> 获取 Stable Diffusion web UI 项目源代码</h5>\n<ul>\n<li>\n<p>可以直接进入 GitHub 里的项目地址直接下载一份源文件的 zip 压缩包并解压到<strong>存放项目文件的文件夹</strong>，项目地址 <code>https://github.com/AUTOMATIC1111/stable-diffusion-webui</code></p>\n</li>\n<li>\n<p>（<strong>默认有 git 并且 git 已配置完成</strong>）也可以直接在存放代码的文件夹里打开 git 命令行，输入命令：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui</pre></td></tr></table></figure><p>上面是直接和 GitHub 服务器建立连接从 GitHub 处下载文件，简单来讲，如果暂时登不上、进不去 GitHub 且又没有 “科学魔法” 且又没有 dev-sidecar，那就用下面这个命令：</p>\n<p>（原理是在<strong> url</strong> 之前添上了 &quot;<strong><span class=\"exturl\" data-url=\"aHR0cDovL2dpdGNsb25lLmNvbS8=\">gitclone.com/</span></strong>&quot;，这个技巧对热门 GitHub 资源都有效）</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https://gitclone.com/github.com/AUTOMATIC1111/stable-diffusion-webui.git</pre></td></tr></table></figure><p>然后，当前文件夹会创建一个与项目同名的文件夹  <code>stable-diffusion-webui</code>  并将下载完成的源文件都存入该文件夹内</p>\n</li>\n</ul>\n</li>\n<li>\n<h5 id=\"将下载的novalai模型训练文件压缩包里的stable-diffusionrar解压到项目源代码文件夹stable-diffusion-webui里的对应位置\"><a class=\"anchor\" href=\"#将下载的novalai模型训练文件压缩包里的stable-diffusionrar解压到项目源代码文件夹stable-diffusion-webui里的对应位置\">#</a> 将下载的 NovalAI 模型训练文件压缩包里的 <code>Stable-diffusion.rar</code>  解压到项目源代码文件夹 <code>stable-diffusion-webui</code>  里的对应位置:</h5>\n<p><code>···\\stable-diffusion-webui\\models\\</code> ，并替换同名文件，完成后删除此处的压缩包</p>\n<ul>\n<li>\n<p>还是进入<strong> Anaconda Prompt 程序</strong>，激活到 novelai 的 py 环境： <code>conda activate novelai</code> ，cd 到该项目的根目录下，安装第三方依赖库：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python -m pip install -r requirements.txt</pre></td></tr></table></figure><p>下载的东西有点多，而且网络有波动可能会下载失败，（pip 如果没换源下载得又慢问题又多）（提示标红出错后，记得把上面的命令多试几次），成功以后<strong>不要退出 Anaconda Prompt 程序</strong>，</p>\n</li>\n<li>\n<p>上一步完成后还需要安装一个插件库 deepdanbooru，用来给 AI 跑图训练时提取信息，特别是使用别人自制的训练模型时：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>本人选择用pip进行下载，首先检查pip的更新</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"\"\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>python -m pip install --upgrade pip</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\"\"\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>然后是下载这个插件库，这里因为当时在下面修改launch.py文件时出了一些问题，就直接从报错里提取的这个插件库的绝对地址进行下载</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\"\"\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>python -m pip install git+https://github.com/KichangKim/DeepDanbooru.git@d91a2963bf87c6a770d74894667e9ffa9f6de7ff#egg=deepdanbooru[tensorflow] tensorflow==2.10.0 tensorflow-io==0.27.0 --prefer-binary</pre></td></tr></table></figure><blockquote>\n<h4 id=\"不过通过上面的代码安装有个缺点就是不能及时得到自动更新所以建议可以先不下载这个库等到最后进行命令运行时会自动检测下载这个库\"><a class=\"anchor\" href=\"#不过通过上面的代码安装有个缺点就是不能及时得到自动更新所以建议可以先不下载这个库等到最后进行命令运行时会自动检测下载这个库\">#</a> 不过通过上面的代码安装有个缺点，就是不能及时得到自动更新，所以 —— 建议可以先不下载这个库，等到最后进行命令运行时，会自动检测下载这个库</h4>\n</blockquote>\n<p>到此<strong>基础配置阶段已经大体完成</strong>。</p>\n</li>\n</ul>\n</li>\n<li>\n<h4 id=\"最重要的一步修改项目根目录下的launchpy文件重点\"><a class=\"anchor\" href=\"#最重要的一步修改项目根目录下的launchpy文件重点\">#</a> 最重要的一步，修改项目根目录下的 launch.py 文件（重点）</h4>\n<p>给原本的代码添加 (命令行)<strong> 参数</strong>:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>commandline_args <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'COMMANDLINE_ARGS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>改为：（跳过 cuda 检测，即启用 CPU 计算模式）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>commandline_args <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'COMMANDLINE_ARGS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--skip-torch-cuda-test\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"三-开始run项目测试一下本地算法部署\"><a class=\"anchor\" href=\"#三-开始run项目测试一下本地算法部署\">#</a> 三、开始 run 项目测试一下（本地算法部署）</h2>\n<ol>\n<li>\n<h5 id=\"延续上一步操作激活novelai的py环境然后cd-到该项目的根目录下完成后命令行里显示如下\"><a class=\"anchor\" href=\"#延续上一步操作激活novelai的py环境然后cd-到该项目的根目录下完成后命令行里显示如下\">#</a> 延续上一步操作，激活 novelai 的 py 环境，然后 cd 到该项目的根目录下，完成后命令行里显示如下：</h5>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>(novelai) D:\\CodeBases\\stable-diffusion-webui></pre></td></tr></table></figure><p>输入命令：（<strong>run 项目的命令</strong>）</p>\n<p><code>python launch.py --precision full --no-half --deepdanbooru --use-cpu all</code></p>\n<p>或（一般下面这个没用）：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python launch.py --precision full --no-half --deepdanbooru --use-cpu all sd interrogate gfpgan bsrgan esrgan scunet codeformer</pre></td></tr></table></figure><p>等待，</p>\n<ul>\n<li>若在上面没有下载<strong> deepdanbooru</strong> 库，则会在自检时先下载这个库，但有可能会下载超时报错，若这样，请多次重试，或在报错信息中提取网址，并将其加在 <code>python -m pip install </code> 的后面执行；</li>\n<li>然后再 run 项目</li>\n<li>若之前步骤的都没问题，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXVnNDExODc5Vy8/aXNfc3RvcnlfaDU9ZmFsc2UmYW1wO3A9MSZhbXA7c2hhcmVfZnJvbT11Z2MmYW1wO3NoYXJlX21lZGl1bT1hbmRyb2lkJmFtcDtzaGFyZV9wbGF0PWFuZHJvaWQmYW1wO3NoYXJlX3Nlc3Npb25faWQ9Y2UxOTQxNWQtMGZjMy00YTBlLWJmMjctNTg3ZWM5NWNlMmEzJmFtcDtzaGFyZV9zb3VyY2U9UVEmYW1wO3NoYXJlX3RhZz1zX2kmYW1wO3RpbWVzdGFtcD0xNjY3NDA2MDk5JmFtcDt1bmlxdWVfaz1tRk1Nbmhy\">请参照此处（点击进入）</span></li>\n</ul>\n<p>（第一次部署大概 20-40 分钟不等），成功后如下图：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211021953095.png\" alt=\"image-20221102195350865\" /></p>\n</li>\n<li>\n<h5 id=\"上图倒数第二行给出了本地url这是开启成功的标志\"><a class=\"anchor\" href=\"#上图倒数第二行给出了本地url这是开启成功的标志\">#</a> 上图倒数第二行给出了本地 URL，这是开启成功的标志，</h5>\n<p>但<strong>不要关闭</strong>这个命令行，<strong>因为它才是完成接下来一些列操作的本体</strong></p>\n<p>将其复制后在浏览器中粘贴进入（page 页面如下）：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211021956138.png\" alt=\"image-20221102195658059\" /></p>\n</li>\n<li>\n<h5 id=\"开始配置图片的生成要素进行效果测试在txt2img标签下操作\"><a class=\"anchor\" href=\"#开始配置图片的生成要素进行效果测试在txt2img标签下操作\">#</a> 开始配置图片的生成要素，进行效果测试（在<strong> txt2img</strong> 标签下操作）</h5>\n<h4 id=\"注cpu算力珍贵且用且珍惜\"><a class=\"anchor\" href=\"#注cpu算力珍贵且用且珍惜\">#</a> 注：CPU 算力珍贵，且用且珍惜</h4>\n<ul>\n<li>\n<p><strong>Prompt</strong>：这一行设置希望 AI 生成的画作中包含的 “<strong>元素</strong>”，用英文词汇描述，例如可以输入：</p>\n<pre><code>masterpiece, best quality,obliques , 1girl, magic, vivid, looking at viewer, from above, black hair, black eyes, floating, flowing dress, &#123;&#123;&#123;&#123;intricate red dress&#125;&#125;&#125;&#125;, hibiscus flowers, d:, cleavage\n\n用&#123;&#125;引用起来的词汇元素表示很看重（相比于其他词权重更大），上面这一段翻译下就是：\n\n杰作，最佳质量，斜肌，1个女孩，魔法，生动，从上面看观众，黑发，黑眼睛，漂浮，飘逸的裙子，&#123;&#123;&#123;复杂的红色连衣裙&#125;&#125;&#125;，芙蓉花，d:，乳沟\n</code></pre>\n<p>当然，毕竟 CPU 算图得慢，所以核显佬不要随便就找些关键词扔上去，不然花了时间也没得到想要的图，心里也不爽・・・</p>\n<pre><code>我的Prompt关键词：\n\n&#123;&#123;ultraman, arm blade, shoulder armor&#125;&#125;, &#123;&#123;&#123;&#123;warrior of light, X crystal breastplate, eye of light , bloody ruins | ruins background&#125;&#125;&#125;&#125;, silver stripes | white stripes, mechanical sense, in battle,  unyielding sense, hope,\n</code></pre>\n<h6 id=\"一些可用的关键词记录\"><a class=\"anchor\" href=\"#一些可用的关键词记录\">#</a> 一些可用的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL2xvbmd5dXllL2xtZ2N3eS9ncmRpM2I=\">关键词记录</span></h6>\n</li>\n<li>\n<p><strong>Negative prompt</strong> ：和上面相反，设置<strong>不希望</strong>在 AI 生成的画作中包含的 “<strong>元素</strong>”，这个一般是通用的（毕竟人的 xp 可能千奇百怪，但列举大部分人都不喜欢的东西还是很容易的，另外，记得在这里防范下奇奇怪怪的克苏鲁元素，防止精神污染，比如：“奇怪的触手” 之类的）</p>\n<pre><code>strange tentacles, lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry,\n</code></pre>\n</li>\n<li>\n<p><strong>Sampling Steps（采样步长）</strong>：简单地理解为迭代次数，越大越耗时，一般 20 左右就足够了，太大提升也有限，（有细致需求 30 也行，不过核显是不要想了・・・太大简直跑到想爆炸）。</p>\n</li>\n<li>\n<p><strong>Sampling method（采样方法）</strong>：简单地理解为迭代算法，感觉 Euler 和 DDIM（Novel 特色）就不错，不同算法适合的迭代次数不尽相同。</p>\n<p><strong>（注：DDIM（Novel 特色）只能用 Nvidia 显卡的 cuda 来跑，核显可以选择 Euler 或 Euler a）</strong></p>\n</li>\n<li>\n<p><strong>Width、Height</strong>：控制图像大小，设备性能差就不要妄想开太大，而且这个项目也不适合生成太大的・・・（512 就挺好）</p>\n</li>\n<li>\n<p><strong>Batch count（连续生成次数）、Batch size（每次生成张数）</strong>：控制每次任务的出图数量，Batch size 太大爆显存，CPU 算的话似乎用的是内存（核显佬唯一有优势的地方・・・但 8g 以下不要想着多生成了・・・）</p>\n</li>\n<li>\n<p><strong>CFG Scale（参数制约度）</strong>：简单地讲，AI 的听话程度，越大越听话（遵照 Prompt、Negative prompt），越小越 “放荡不羁爱自由”</p>\n</li>\n<li>\n<p><strong>Seed</strong>：就是随机种子，可以指定，-1 就是随机种子。</p>\n</li>\n</ul>\n</li>\n<li>\n<h5 id=\"开始生成\"><a class=\"anchor\" href=\"#开始生成\">#</a> 开始生成:</h5>\n<p>完成上面的图片生成参数设置后，点击右上角的<strong> Generate</strong> 开始生成，这时 Generate 的按钮下方会出现一个蓝色进度条，此时 CPU（GPU）就开始工作了，（如果没有蓝色进度条或一闪而过，就表示当前跑不起来，这时就要检查各项配置了），耐心等待图片的生成：（图有点丑，毕竟刚开始用没经验）</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211030005626.png\" alt=\"image-20221103000544258\" /></p>\n<p>下面是按照其他人的案例配置生成的效果图：（我还改了一下的・・・狗头保命）</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211030020800.png\" alt=\"00002-815804347-masterpiece, best quality,obliques , 1girl, magic, vivid, looking at viewer, from above, black hair, black eyes, floating, flowi\" /></p>\n</li>\n</ol>\n<h2 id=\"四-可做添加点击即run项目的设置\"><a class=\"anchor\" href=\"#四-可做添加点击即run项目的设置\">#</a> 四、（可做）添加点击即 run 项目的设置</h2>\n<h5 id=\"简单地讲很麻烦\"><a class=\"anchor\" href=\"#简单地讲很麻烦\">#</a> 简单地讲，很麻烦。</h5>\n<ul>\n<li>\n<h6 id=\"如果一开始就弄的是命令行运行现在想转点击即run那我建议直接重开重新按照方式二建立一个项目\"><a class=\"anchor\" href=\"#如果一开始就弄的是命令行运行现在想转点击即run那我建议直接重开重新按照方式二建立一个项目\">#</a> 如果一开始就弄的是命令行运行，现在想转点击即 run，那我建议直接重开 —— 重新按照方式二建立一个项目</h6>\n</li>\n<li>\n<h6 id=\"如果两种启动方式都想要建议由方式二的点击即run开始逐步添加命令行运行\"><a class=\"anchor\" href=\"#如果两种启动方式都想要建议由方式二的点击即run开始逐步添加命令行运行\">#</a> 如果两种启动方式都想要，建议由方式二的点击即 run 开始，逐步添加命令行运行・・・</h6>\n</li>\n</ul>\n<p>当然，本人也在探究一种邪门的方法・・・就是在方式一可以成功跑图之后（此时的依赖包全在所创建的非 path 的 py 环境里），从理论上讲，可以按照方式二中项目文件的配置流程重新配置一个项目文件，然后按照方式二的部署方式进行部署，这时因为依赖文件是齐全的，所以不需要重新下载依赖库（<strong>在理论上可行</strong>）</p>\n<h1 id=\"方式二配置过程\"><a class=\"anchor\" href=\"#方式二配置过程\">#</a> 方式二配置过程：</h1>\n<h2 id=\"一-准备的环境配置默认已有python3环境\"><a class=\"anchor\" href=\"#一-准备的环境配置默认已有python3环境\">#</a> 一、准备的环境配置 —— 默认已有 python3 环境</h2>\n<h3 id=\"可选择安装anaconda\"><a class=\"anchor\" href=\"#可选择安装anaconda\">#</a> （<em>可选择安装</em>）Anaconda</h3>\n<blockquote>\n<h4 id=\"anaconda安与不安可自行选择它们的区别就在于\"><a class=\"anchor\" href=\"#anaconda安与不安可自行选择它们的区别就在于\">#</a> Anaconda 安与不安可自行选择，它们的区别就在于：</h4>\n<h5 id=\"不安anaconda那之后大概几个g大小的一堆依赖库就会默认加装在本地path路径里的python环境里\"><a class=\"anchor\" href=\"#不安anaconda那之后大概几个g大小的一堆依赖库就会默认加装在本地path路径里的python环境里\">#</a> 不安 anaconda，那之后大概几个 G 大小的一堆依赖库就会默认加装在本地 path 路径里的 python 环境里</h5>\n<h6 id=\"安了anaconda这些依赖库被安在哪将由你自行决定且它们与本地path路径里的python环境是隔离的\"><a class=\"anchor\" href=\"#安了anaconda这些依赖库被安在哪将由你自行决定且它们与本地path路径里的python环境是隔离的\">#</a> 安了 anaconda，这些依赖库被安在哪将由你自行决定，且它们与本地 path 路径里的 python 环境是隔离的</h6>\n</blockquote>\n<ul>\n<li>选择安装，就去方式一那里把 Anaconda 的安装流程走一遍（包括<strong> anaconda 的换源，py 环境的新建，pip 的更新和换源</strong>），括号里的这<strong>三件事一定要完成</strong>，因为这关系到后面的实际安装体验</li>\n<li>选择不安装，就确保本地的 python 最好要大于等于 3.10.6</li>\n</ul>\n<h3 id=\"可选择安装dev-sidecar强烈推荐\"><a class=\"anchor\" href=\"#可选择安装dev-sidecar强烈推荐\">#</a> （<em>可选择安装</em>）dev-sidecar（强烈推荐）</h3>\n<p>简单地说，除非你会”<strong> 科学上网</strong> “或者会”<strong> 神奇魔法</strong> “或者你有”<strong> 边车</strong> “，不然你在后面的初始化依赖库安装时，一定会受尽折磨・・・</p>\n<p>说人话就是，你要么需要有能和 GitHub 建立稳定通信的方式，要么有着能加速 git clone 的手段；</p>\n<p>对一般人而言，实现前者一般用 “<strong>边车</strong>”（dev-sidecar），后者的话，一般是找镜像网站或代理网站加速下载</p>\n<h3 id=\"pytorch就后面的结果来看暂时不需要单独下载\"><a class=\"anchor\" href=\"#pytorch就后面的结果来看暂时不需要单独下载\">#</a> Pytorch（就后面的结果来看，暂时不需要单独下载）</h3>\n<h2 id=\"二-项目文件的配置部分参照方式一\"><a class=\"anchor\" href=\"#二-项目文件的配置部分参照方式一\">#</a> 二、项目文件的配置 —— 部分参照方式一</h2>\n<ol>\n<li>\n<h4 id=\"下载novalai模型训练文件同方式一\"><a class=\"anchor\" href=\"#下载novalai模型训练文件同方式一\">#</a> 下载 NovalAI 模型训练文件 —— 同方式一</h4>\n</li>\n<li>\n<h4 id=\"获取stable-diffusion-web-ui项目源代码同方式一\"><a class=\"anchor\" href=\"#获取stable-diffusion-web-ui项目源代码同方式一\">#</a> 获取 Stable Diffusion web UI 项目源代码 —— 同方式一</h4>\n</li>\n<li>\n<h4 id=\"仅需要novalai模型训练文件放置到项目的对应文件夹下\"><a class=\"anchor\" href=\"#仅需要novalai模型训练文件放置到项目的对应文件夹下\">#</a> 仅需要 NovalAI 模型训练文件放置到项目的对应文件夹下，</h4>\n<h4 id=\"即~stable-diffusion-webuimodelsstable-diffusion\"><a class=\"anchor\" href=\"#即~stable-diffusion-webuimodelsstable-diffusion\">#</a> 即 <code>~\\stable-diffusion-webui\\models\\Stable-diffusion</code></h4>\n</li>\n<li>\n<h4 id=\"最重要的一步修改项目根目录下的launchpy文件重点和webui-userbat文件重点\"><a class=\"anchor\" href=\"#最重要的一步修改项目根目录下的launchpy文件重点和webui-userbat文件重点\">#</a> 最重要的一步，修改项目根目录下的 launch.py 文件（重点）和 webui-user.bat 文件（重点）：</h4>\n<ul>\n<li>\n<p>右键编辑该 launch.py 文件（建议用 VScode 这种代码编辑器打开，实在不行用记事本也可以），</p>\n<p>然后 ctrl+F 全局查找含 <code>github</code>  的代码部分，发现共 11 个结果，需要更改的为中间的九个（如下图）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gfpgan_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'GFPGAN_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git+https://github.com/TencentARC/GFPGAN.git@8d2447a2d918f8eba5a4a01463fd48e45126a379\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>clip_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'CLIP_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git+https://github.com/openai/CLIP.git@d50d76daa670286dd6cacf3bcd80b5e4823fc8e1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deepdanbooru_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'DEEPDANBOORU_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git+https://github.com/KichangKim/DeepDanbooru.git@d91a2963bf87c6a770d74894667e9ffa9f6de7ff\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>xformers_windows_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'XFORMERS_WINDOWS_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://github.com/C43H66N12O12S2/stable-diffusion-webui/releases/download/f/xformers-0.0.14.dev0-cp310-cp310-win_amd64.whl'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stable_diffusion_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'STABLE_DIFFUSION_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://github.com/CompVis/stable-diffusion.git\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>taming_transformers_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'TAMING_REANSFORMERS_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://github.com/CompVis/taming-transformers.git\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>k_diffusion_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'K_DIFFUSION_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://github.com/crowsonkb/k-diffusion.git'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>codeformer_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'CODEFORMET_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://github.com/sczhou/CodeFormer.git'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>blip_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'BLIP_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://github.com/salesforce/BLIP.git'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>改为如下</strong>：（为了加速下载的速度，原理可自行去百度 <code>https://ghproxy.com/</code>  和 <code>gitclone.com/</code>  有什么用）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gfpgan_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'GFPGAN_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git+https://gitclone.com/github.com/TencentARC/GFPGAN.git@8d2447a2d918f8eba5a4a01463fd48e45126a379\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>clip_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'CLIP_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git+https://gitclone.com/github.com/openai/CLIP.git@d50d76daa670286dd6cacf3bcd80b5e4823fc8e1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deepdanbooru_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'DEEPDANBOORU_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git+https://ghproxy.com/https://github.com/KichangKim/DeepDanbooru.git@d91a2963bf87c6a770d74894667e9ffa9f6de7ff\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>xformers_windows_package <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'XFORMERS_WINDOWS_PACKAGE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://gitclone.com/github.com/C43H66N12O12S2/stable-diffusion-webui/releases/download/f/xformers-0.0.14.dev0-cp310-cp310-win_amd64.whl'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stable_diffusion_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'STABLE_DIFFUSION_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://gitclone.com/github.com/CompVis/stable-diffusion.git\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>taming_transformers_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'TAMING_REANSFORMERS_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://gitclone.com/github.com/CompVis/taming-transformers.git\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>k_diffusion_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'K_DIFFUSION_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://gitclone.com/github.com/crowsonkb/k-diffusion.git'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>codeformer_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'CODEFORMET_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://gitclone.com/github.com/sczhou/CodeFormer.git'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>blip_repo <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'BLIP_REPO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://gitclone.com/github.com/salesforce/BLIP.git'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>改完后，<strong>保存退出</strong>；</p>\n</li>\n<li>\n<p>右键编辑 webui-user.bat 文件，找到下面的这一行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">COMMANDLINE_ARGS</span><span class=\"token operator\">=</span></pre></td></tr></table></figure><p>在其后添加参数:</p>\n<p><code>--skip-torch-cuda-test --precision full --no-half --deepdanbooru --use-cpu all</code></p>\n<p>使其变成：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">COMMANDLINE_ARGS</span><span class=\"token operator\">=</span> --skip-torch-cuda-test <span class=\"token parameter variable\">--precision</span> full --no-half <span class=\"token parameter variable\">--deepdanbooru</span> --use-cpu all</pre></td></tr></table></figure><p>改完后，<strong>保存退出</strong>；</p>\n<blockquote>\n<h2 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意：</h2>\n<ul>\n<li>\n<h2 id=\"如果你想用anaconda控制那大概4个g左右依赖库的存储位置请一定不要在此时左键它或者使它运行\"><a class=\"anchor\" href=\"#如果你想用anaconda控制那大概4个g左右依赖库的存储位置请一定不要在此时左键它或者使它运行\">#</a> 如果你想用 Anaconda 控制那大概 4 个 G 左右依赖库的存储位置，请”<strong> 一定不要</strong> “在此时左键它或者使它运行，</h2>\n</li>\n<li>\n<h2 id=\"而需要在anaconda-prompt程序中新建好一个非系统path的python环境激活该环境后cd到项目根目录下这些操作参照方式一中相关内容然后再运行它\"><a class=\"anchor\" href=\"#而需要在anaconda-prompt程序中新建好一个非系统path的python环境激活该环境后cd到项目根目录下这些操作参照方式一中相关内容然后再运行它\">#</a> 而需要在 Anaconda Prompt 程序中新建好一个非系统 path 的 python 环境，激活该环境后 cd 到项目根目录下（这些操作参照方式一中相关内容），然后再运行它</h2>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三-直接开始run项目开始第一次部署\"><a class=\"anchor\" href=\"#三-直接开始run项目开始第一次部署\">#</a> 三、直接开始 run 项目开始第一次部署</h2>\n<ul>\n<li>\n<h5 id=\"使用anaconda只要完成第一次部署后以后再次运行可以直接点击webui-userbat即运行\"><a class=\"anchor\" href=\"#使用anaconda只要完成第一次部署后以后再次运行可以直接点击webui-userbat即运行\">#</a> 使用 Anaconda：（只要完成第一次部署后，以后再次运行可以直接点击 webui-user.bat 即运行）</h5>\n<ul>\n<li>\n<h6 id=\"打开anaconda-prompt程序激活某个想存放依赖库的py环境\"><a class=\"anchor\" href=\"#打开anaconda-prompt程序激活某个想存放依赖库的py环境\">#</a> 打开 Anaconda Prompt 程序，激活某个想存放依赖库的 py 环境，</h6>\n</li>\n<li>\n<h6 id=\"cd到项目根目录下并输入命令webui-userbat然后回车\"><a class=\"anchor\" href=\"#cd到项目根目录下并输入命令webui-userbat然后回车\">#</a> cd 到项目根目录下，并输入命令 <code>.\\webui-user.bat</code> ，然后回车，</h6>\n</li>\n<li>\n<h6 id=\"耐心等待遇到下载超时报错的情况再次执行上一步的命令就行\"><a class=\"anchor\" href=\"#耐心等待遇到下载超时报错的情况再次执行上一步的命令就行\">#</a> 耐心等待，遇到下载超时报错的情况，再次执行上一步的命令就行</h6>\n</li>\n</ul>\n</li>\n<li>\n<h5 id=\"不使用anaconda默认不控制依赖库位置\"><a class=\"anchor\" href=\"#不使用anaconda默认不控制依赖库位置\">#</a> 不使用 Anaconda（默认不控制依赖库位置）</h5>\n<ul>\n<li>\n<h6 id=\"直接点击项目根目录下的webui-userbat文件\"><a class=\"anchor\" href=\"#直接点击项目根目录下的webui-userbat文件\">#</a> 直接点击项目根目录下的 webui-user.bat 文件</h6>\n</li>\n<li>\n<h6 id=\"耐心等待遇到下载超时报错的情况点击继续退出命令行后再次点击该bat文件就行\"><a class=\"anchor\" href=\"#耐心等待遇到下载超时报错的情况点击继续退出命令行后再次点击该bat文件就行\">#</a> 耐心等待，遇到下载超时报错的情况，点击继续退出命令行后再次点击该 bat 文件就行</h6>\n</li>\n</ul>\n</li>\n<li>\n<h6 id=\"如果前面操作无误那么在一阵耐心的等待后就会成功如下图\"><a class=\"anchor\" href=\"#如果前面操作无误那么在一阵耐心的等待后就会成功如下图\">#</a> 如果前面操作无误，那么在一阵耐心的等待后，就会成功（如下图）：</h6>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211050413166.png\" alt=\"image-20221105041328858\" /></p>\n</li>\n<li>\n<h5 id=\"对比前面使用命令控制launchpy文件部署启动可以发现此启动方式在启动时对电脑的压力比前者下一些但警告语句也会多一些经过实测在同样的tag下此方式比上一种方式在生成图片的过程中对cpu与内存的要求更高但相对应的质量也会更高疑似pytorch的版本造成的影响gpu版比cpu版更要求性能\"><a class=\"anchor\" href=\"#对比前面使用命令控制launchpy文件部署启动可以发现此启动方式在启动时对电脑的压力比前者下一些但警告语句也会多一些经过实测在同样的tag下此方式比上一种方式在生成图片的过程中对cpu与内存的要求更高但相对应的质量也会更高疑似pytorch的版本造成的影响gpu版比cpu版更要求性能\">#</a> 对比前面使用命令控制 launch.py 文件部署启动，可以发现，此启动方式在启动时对电脑的压力比前者下一些，但警告语句也会多一些，经过实测，在同样的 tag 下，此方式比上一种方式在生成图片的过程中对 CPU 与内存的要求更高，但相对应的，质量也会更高，疑似 pytorch 的版本造成的影响（GPU 版比 CPU 版更要求性能？）</h5>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211050422950.png\" alt=\"00000-3717904703-masterpiece, best quality,obliques , 1girl, magic, vivid, looking at viewer, from above, black hair, black eyes, floating, flowi\" /></p>\n</li>\n</ul>\n<h4 id=\"注后面是一些level-4会参考到的教程\"><a class=\"anchor\" href=\"#注后面是一些level-4会参考到的教程\">#</a> 注：后面是一些 level 4 会参考到的教程</h4>\n<ul>\n<li>[NovelAi 配置大致流程](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2M0MDY0OTU3NjIvYXJ0aWNsZS9kZXRhaWxzLzEyNzQxOTQ3NA==\">(13 条消息) AI 杀疯了，NovelAI 开源教程_Jack-Cui 的博客 - CSDN 博客_csnd</span>)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXVnNDExODc5Vy8/aXNfc3RvcnlfaDU9ZmFsc2UmYW1wO3A9MSZhbXA7c2hhcmVfZnJvbT11Z2MmYW1wO3NoYXJlX21lZGl1bT1hbmRyb2lkJmFtcDtzaGFyZV9wbGF0PWFuZHJvaWQmYW1wO3NoYXJlX3Nlc3Npb25faWQ9Y2UxOTQxNWQtMGZjMy00YTBlLWJmMjctNTg3ZWM5NWNlMmEzJmFtcDtzaGFyZV9zb3VyY2U9UVEmYW1wO3NoYXJlX3RhZz1zX2kmYW1wO3RpbWVzdGFtcD0xNjY3NDA2MDk5JmFtcDt1bmlxdWVfaz1tRk1Nbmhy\">让 NovelAI 强制用 CPU 跑</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3YxOTA4MjM4OA==\">用 webui-user.bat 开启项目</span></li>\n</ul>\n</li>\n<li>\n<h6 id=\"httpswwwbilibilicomvideobv1ug411879wis_story_h5falsep1share_fromugcshare_mediumandroidshare_platandroidshare_session_idce19415d-0fc3-4a0e-bf27-587ec95ce2a3share_sourceqqshare_tags_itimestamp1667406099unique_kmfmmnhr\"><a class=\"anchor\" href=\"#httpswwwbilibilicomvideobv1ug411879wis_story_h5falsep1share_fromugcshare_mediumandroidshare_platandroidshare_session_idce19415d-0fc3-4a0e-bf27-587ec95ce2a3share_sourceqqshare_tags_itimestamp1667406099unique_kmfmmnhr\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXVnNDExODc5Vy8/aXNfc3RvcnlfaDU9ZmFsc2UmYW1wO3A9MSZhbXA7c2hhcmVfZnJvbT11Z2MmYW1wO3NoYXJlX21lZGl1bT1hbmRyb2lkJmFtcDtzaGFyZV9wbGF0PWFuZHJvaWQmYW1wO3NoYXJlX3Nlc3Npb25faWQ9Y2UxOTQxNWQtMGZjMy00YTBlLWJmMjctNTg3ZWM5NWNlMmEzJmFtcDtzaGFyZV9zb3VyY2U9UVEmYW1wO3NoYXJlX3RhZz1zX2kmYW1wO3RpbWVzdGFtcD0xNjY3NDA2MDk5JmFtcDt1bmlxdWVfaz1tRk1Nbmhy\">https://www.bilibili.com/video/BV1ug411879W/?is_story_h5=false&amp;p=1&amp;share_from=ugc&amp;share_medium=android&amp;share_plat=android&amp;share_session_id=ce19415d-0fc3-4a0e-bf27-587ec95ce2a3&amp;share_source=QQ&amp;share_tag=s_i&amp;timestamp=1667406099&amp;unique_k=mFMMnhr</span>)</h6>\n</li>\n</ul>\n",
            "tags": [
                "red_rock third_homework level 0 ~ level 4"
            ]
        },
        {
            "id": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/11/03/C&C++/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/",
            "url": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/11/03/C&C++/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/",
            "title": "第二次课后作业（C语言）",
            "date_published": "2022-11-02T16:35:07.000Z",
            "content_html": "<blockquote>\n<p><em>@file</em> <em>aferclass_jobs.c</em></p>\n<p><em>@author</em> <em>xunguang (<span class=\"exturl\" data-url=\"bWFpbHRvOnh1bmd1YW5nQGJsYWNrLXNreWxpbmUuZ2l0aHViLmlv\">xunguang@black-skyline.github.io</span>)</em></p>\n<p><em>@brief</em></p>\n<p><em>@version</em> <em>0.1</em></p>\n<p><em>@date</em> <em>2022-10-25</em></p>\n<p><em>@copyright</em> <em>Copyright (c) 2022</em></p>\n</blockquote>\n<h1 id=\"level-0\"><a class=\"anchor\" href=\"#level-0\">#</a> level 0</h1>\n<p>对第一段代码的解读：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  声明一个整型变量 a，并将其初始化为 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  if 分支条件判断，进行判断，a==5 成立，返回 1 值，执行该 if 块域的语句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  获得执行，输出字符串 “111” 并换行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  另一个 if 分支条件判断，进行判断，a==5 成立，返回 1 值，执行该 if 块域的语句</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"222\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  获得执行，输出字符串 “222” 并换行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  main () 函数到此结束，退出程序</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//  上述两个 if 分支条件判断语句属于 “不同时间进度” 下的分支，在程序运行过程中可以都被执行到。</span></pre></td></tr></table></figure><p>对第二段代码的解读：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  声明一个整型变量 a，并将其初始化为 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  if 分支条件判断，进行判断，a==5 成立，返回 1 值，执行该 if 块域的语句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  获得执行，输出字符串 “111” 并换行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//  此时（逻辑上的）前方有 if 语句成立获得执行，那么该 if 分支将被直接忽略并跳过</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"222\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  被跳过，未获得执行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  main () 函数到此结束，退出程序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//  上述 if 和其后紧跟着的 else if 分支条件判断语句属于 “同一时间进度” 下的分支，执行逻辑为：按照代码逻辑顺序依次判断，仅当先执行的 if 语句（else if 语句）条件不成立时，后面的 else if 才能依次进行判断，一旦某个 if（else if）条件成立，程序执行该 if 块域的语句，（逻辑上的）后面的 else if 及 else 语句将被直接忽略跳过</span></pre></td></tr></table></figure><h1 id=\"level-1\"><a class=\"anchor\" href=\"#level-1\">#</a> level 1</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  level 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"level-2\"><a class=\"anchor\" href=\"#level-2\">#</a> level 2</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  level 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  给数组预留一些长度是个好习惯</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"提示信息，请输入十个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%4d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  这里原来定义的 i 的值范围会导致下面对换时数组越界情况</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> MAX <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"level-3\"><a class=\"anchor\" href=\"#level-3\">#</a> level 3</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  level 3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//  由于 sre 目前的 C 语言课没有讲到二维数组，所以采用一维数组完成</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入矩阵（一行一行地输入）：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        r <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d行：\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a1<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a2<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a3<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主对角线 元素和为：%d\\n\"</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"副对角线 元素和为：%d\\n\"</span><span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主副对角线 元素和为：%d\\n\"</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"level-4\"><a class=\"anchor\" href=\"#level-4\">#</a> level 4</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  level 4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">getQQcoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入给定天数：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> d <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入数字不合适，请重新输入合适天数;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    res <span class=\"token operator\">=</span> <span class=\"token function\">getQQcoin</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">getQQcoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> int_day <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">long</span> coin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>int_day <span class=\"token operator\">+</span> j <span class=\"token operator\">></span> d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        coin <span class=\"token operator\">+=</span> j <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        int_day <span class=\"token operator\">+=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    coin <span class=\"token operator\">=</span> coin <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">-</span> int_day<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> d <span class=\"token operator\">/</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> coin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "red_rock second_homework level 0 ~ level 4"
            ]
        },
        {
            "id": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/10/23/Hexo/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/",
            "url": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/10/23/Hexo/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/",
            "title": "第一次课后作业",
            "date_published": "2022-10-23T06:20:18.000Z",
            "content_html": "<h1 id=\"level-0\"><a class=\"anchor\" href=\"#level-0\">#</a> Level 0 :</h1>\n<h6 id=\"the-first-step\"><a class=\"anchor\" href=\"#the-first-step\">#</a> the first step</h6>\n<pre><code class=\"language-Linux\">cd Desktop/\n</code></pre>\n<h6 id=\"the-second-step\"><a class=\"anchor\" href=\"#the-second-step\">#</a> the second step</h6>\n<pre><code class=\"language-Linux\">mkdir test_file\ncd test_file/\n</code></pre>\n<h6 id=\"the-third-step\"><a class=\"anchor\" href=\"#the-third-step\">#</a> the third  step</h6>\n<pre><code class=\"language-Linux\">touch hello\\ world.c\n#touch 'hello world.c'\n#touch &quot;hello world.c&quot;\n</code></pre>\n<h6 id=\"the-fourth-step\"><a class=\"anchor\" href=\"#the-fourth-step\">#</a> the fourth step</h6>\n<pre><code class=\"language-Linux\">vim hello\\ world.c\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Write the following code to 'hello world.c'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello redrock!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"the-fifth-step\"><a class=\"anchor\" href=\"#the-fifth-step\">#</a> the fifth  step</h6>\n<pre><code class=\"language-Linux\">gcc hello\\ world -o hello\\ world\n</code></pre>\n<h6 id=\"the-sixth-step\"><a class=\"anchor\" href=\"#the-sixth-step\">#</a> the sixth step</h6>\n<pre><code class=\"language-Linux\">./hello\\ world\n</code></pre>\n<h6 id=\"the-final-display\"><a class=\"anchor\" href=\"#the-final-display\">#</a> the final display</h6>\n<h1 id=\"level-05\"><a class=\"anchor\" href=\"#level-05\">#</a> Level 0.5 :</h1>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210222110024.png\" alt=\"level_1_display\" /></p>\n<h1 id=\"level-1\"><a class=\"anchor\" href=\"#level-1\">#</a> Level 1 ：</h1>\n<p>得出的<strong> flag</strong>： <code>flag&#123;2Hy_1s_50_cut3!&#125;</code></p>\n<h6 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项：</h6>\n<pre><code class=\"language-linux\">1.在根目录执行文件夹的新建需要管理员权限  sudo\nsudo mkdir 2Hy\n2.为了让名称中含有特殊意义字符的文件与文件夹中的能被正常识别，应该使用&quot;&quot; 或 '' 将其包裹引用或者将名称里的特殊字符用 \\ 进行转义处理 例如\ntouch 'yyz_qswd@12dfep[efrgtc๑۩۞۩๑♡m1net♡◕◕♡⊙●○①⊕.txt'\ntouch yyz_qswd@12dfep\\[efrgtc๑۩۞۩๑♡m1net♡◕◕♡⊙●○①⊕\nmv yyz_qswd@12dfep\\[efrgtc๑۩۞۩๑♡m1net♡◕◕♡⊙●○①⊕ &quot;L1 Ha0&quot;\n</code></pre>\n<h1 id=\"level-21\"><a class=\"anchor\" href=\"#level-21\">#</a> Level 2.1 :</h1>\n<blockquote>\n<h6 id=\"一个简单的个人博客空间搭建\"><a class=\"anchor\" href=\"#一个简单的个人博客空间搭建\">#</a> 一个简单的个人博客空间搭建</h6>\n<h4 id=\"搭建方式\"><a class=\"anchor\" href=\"#搭建方式\">#</a> 搭建方式：</h4>\n<p><strong>Hexo</strong> + <strong>GitHub Page</strong></p>\n<h4 id=\"材料准备\"><a class=\"anchor\" href=\"#材料准备\">#</a> 材料（准备）：</h4>\n<p>工具类：<strong>git 、 hexo</strong></p>\n<p>环境类：<strong>Node.js 、 github</strong></p>\n</blockquote>\n<h3 id=\"正式开始前的准备\"><a class=\"anchor\" href=\"#正式开始前的准备\">#</a> 正式开始前的准备</h3>\n<h4 id=\"首先\"><a class=\"anchor\" href=\"#首先\">#</a> 首先，</h4>\n<p>要将 <code>git</code>  和  <code>Node.js</code>  从官网上下载到本地，过程这里不过多地赘述（node.js 建议下载长期支持版、git 则是下载最新版），（对于 windows 操作系统而言）下载好之后地两个程序并不是我们需要的材料本体，而是安装程序，如图：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210222131524.jpg\" alt=\"NodeJs安装程序展示\" /></p>\n<p>点击执行安装程序后，除了安装路径以外，其他选项按照默认的一直点击 next 就行，但值得一提的是，对于新手来说，安装 git 时建议勾选上 “git bash here”，安装 Node.js 时遇到含有 PATH 选项时，一定要选择将其勾选上（自动帮你把 node.js 添加到环境变量），而且 node.js 相关工具包下载也建议勾选上；</p>\n<h4 id=\"其次\"><a class=\"anchor\" href=\"#其次\">#</a> 其次，</h4>\n<p>在安装完成后，输入如下代码：</p>\n<pre><code class=\"language-dos\">node -v  //  检查node.js版本信息\nnpm -v  //  检查Node包管理器的版本信息\ngit --version  //  检查git版本信息\n</code></pre>\n<p>若安装成功，则效果如下图（会出现版本信息），否则，应该是安装过程出了岔子，要重新安装一次：（）</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210222146473.jpg\" alt=\"检查版本信息\" /></p>\n<h4 id=\"然后\"><a class=\"anchor\" href=\"#然后\">#</a> 然后，</h4>\n<p>给  <code>npm</code>  设置成阿里的国内镜像：</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org\n</code></pre>\n<p>利用  <code>npm</code>  在命令行中安装 <code>hexo</code>  ，输入下面的代码</p>\n<pre><code class=\"language-dos\">npm install hexo-cli -g  //  意思是用npm工具将hexo-cli包进行全局安装，使得在本地任何位置都能调用hexo-cli\n</code></pre>\n<p>同样的，安装完成后输入 <code>hexo -v</code>  检查安装是否成功，道理和效果图类似上方，完成之后，</p>\n<p>开始配置 GitHub 相关；</p>\n<p>若没有 github 账号，就到  <s><strong>（全球最大职业交流交友平台）</strong></s>  GitHub 官网去注册账号，注册成功后来到首页在右上角点击加号并新建一个 github 仓库（new repository）：</p>\n<p><img data-src=\"https://pic4.zhimg.com/80/v2-d540634267b3fbffa9d3bd887cc66827_720w.webp\" alt=\"\" /></p>\n<p>创建选项如下图：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210222212075.jpg\" alt=\"创建GitHub仓库\" /></p>\n<h5 id=\"重点记录该仓库的地址网址httpsgithubcomblack-skylineblack-skylinegithubio\"><a class=\"anchor\" href=\"#重点记录该仓库的地址网址httpsgithubcomblack-skylineblack-skylinegithubio\">#</a> 重点，记录该仓库的地址 (网址)： <code>https://github.com/Black-Skyline/Black-Skyline.github.io</code></h5>\n<p>另外，git 也需要提前配置一下，随便找个位置进入 git 命令行，然后输入：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 配置用户名和邮箱</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git config --global user.name <span class=\"token string\">\"github 用户名\"</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git config --global user.email <span class=\"token string\">\"github 注册邮箱\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 与 github 弄成同一个用户名方便管理，邮箱是全称，如：1234@qq.com</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 然后检查是否配置成功</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>git config -l</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 若出现有下面两行提示信息，则配置成功</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>user.email=···(上面配置的邮箱)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>user.name=···(上面配置的用户名)</pre></td></tr></table></figure><h3 id=\"开始建站\"><a class=\"anchor\" href=\"#开始建站\">#</a> 开始建站，</h3>\n<h4 id=\"首先-2\"><a class=\"anchor\" href=\"#首先-2\">#</a> 首先，</h4>\n<p>选择一个文件夹（或新建）作为博客网站在本地的存储位置，我的选择是：&quot;D:\\HexoBlog\\FirstBlog&quot;.</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210222227033.jpg\" alt=\"网站在本地的储存位置\" /></p>\n<h4 id=\"然后-2\"><a class=\"anchor\" href=\"#然后-2\">#</a> 然后，</h4>\n<p>进入此文件夹，在此处唤出 git 命令行（鼠标空白处右键 &gt; <em><strong>Git Bash Here</strong></em>）, 输入以下命令完成初始化：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init .</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install</pre></td></tr></table></figure><p>初始化成功效果如下：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo init .</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INFO  Install dependencies</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>INFO  Start blogging with Hexo!</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ npm install</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>up to date in 1s</pre></td></tr></table></figure><h4 id=\"紧接着\"><a class=\"anchor\" href=\"#紧接着\">#</a> 紧接着，</h4>\n<p>这时当前文件夹里会自动生成一些文件和文件夹，初始化完成后就可以在本地测试效果了：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INFO  Validating config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INFO  Start processing</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</pre></td></tr></table></figure><blockquote>\n<p><strong>hexo s</strong> 是开启本地的 Hexo 服务器的命令，这时可以打开浏览器，在地址栏中输入  <code>localhost:4000</code>  就可以看到本地的网页效果了。</p>\n</blockquote>\n<p>效果大致如下：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202211042014195.jpg\" alt=\"效果测试\" /></p>\n<h4 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后，</h4>\n<p>按 <em><strong>Ctrl+C</strong></em> 中断退出服务器的运行，至此，基础的模版页面便已经搭建好了。</p>\n<h6 id=\"注hexo-s-命令也可以换成-hexo-server-两者是等价的\"><a class=\"anchor\" href=\"#注hexo-s-命令也可以换成-hexo-server-两者是等价的\">#</a> 注： <code>hexo s</code>  命令也可以换成  <code>hexo server</code>  ，两者是等价的</h6>\n<h3 id=\"生成静态文件\"><a class=\"anchor\" href=\"#生成静态文件\">#</a> 生成静态文件</h3>\n<p>由于平台原因（GitHub Page 只支持静态页面和文件），所以在博客部署前需要先生成对应的静态文件，然后再将其部署到 GitHub</p>\n<p>所需命令如下：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> # 该命令是将上一次部署时生成的静态文件进行清除，防止在多次生成静态文件时缓存错误</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> hexo g</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> # 该命令等价于 hexo generate</pre></td></tr></table></figure><p>效果如下：</p>\n<pre><code>$ hexo clean\nINFO  Validating config\nINFO  Deleted database.\n\n$ hexo g\nINFO  Validating config\nINFO  Start processing\nINFO  Files loaded in 111 ms\nINFO  Generated: archives/index.html\nINFO  Generated: archives/2022/10/index.html\nINFO  Generated: index.html\nINFO  Generated: fancybox/jquery.fancybox.min.css\nINFO  Generated: archives/2022/index.html\nINFO  Generated: js/script.js\nINFO  Generated: css/style.css\nINFO  Generated: css/fonts/fontawesome-webfont.woff2\nINFO  Generated: fancybox/jquery.fancybox.min.js\nINFO  Generated: css/fonts/fontawesome-webfont.woff\nINFO  Generated: js/jquery-3.4.1.min.js\nINFO  Generated: css/fonts/fontawesome-webfont.eot\nINFO  Generated: 2022/10/23/hello-world/index.html\nINFO  Generated: css/fonts/FontAwesome.otf\nINFO  Generated: css/fonts/fontawesome-webfont.ttf\nINFO  Generated: css/images/banner.jpg\nINFO  Generated: css/fonts/fontawesome-webfont.svg\nINFO  17 files generated in 268 ms\n</code></pre>\n<p>此时当前文件夹下生成了一个 public 文件夹用于储存生成的静态文件，到时候部署也是部署这个文件夹上去；</p>\n<p>另外，如果  <code>hexo clean</code>  命令生效，则效果如下：</p>\n<pre><code>$ hexo clean\nINFO  Validating config\nINFO  Deleted database.\nINFO  Deleted public folder.\n</code></pre>\n<h3 id=\"将文件部署到github-pages上\"><a class=\"anchor\" href=\"#将文件部署到github-pages上\">#</a> 将文件部署到 GitHub Pages 上</h3>\n<p>为了更方便地完成部署，下载一个部署插件：</p>\n<pre><code> npm install hexo-deployer-git\n</code></pre>\n<p>然后，对网站存放的根文件夹 (我是 <em><strong>FirstBlog</strong></em> 文件夹) 里的 <em><strong>_config.yml</strong></em> 文件进行编辑配置：</p>\n<p>（使用 VS code 或其他的文本编辑器打开，甚至是 window 自带记事本也可）</p>\n<p>需要更改的原始代码：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Hexo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> John Doe</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> en</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//example.com</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>deploy<span class=\"token punctuation\">:</span><span class=\"token string\">' '</span></pre></td></tr></table></figure><p>把它们更改为如下格式：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 黑色天际线的博客空间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'测试版'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'此博客空间为个人学习笔记上传处'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> 学习笔记</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 寻光</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># language: en</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Asia/Shanghai'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//Black<span class=\"token punctuation\">-</span>Skyline.github.io</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/Black<span class=\"token punctuation\">-</span>Skyline/Black<span class=\"token punctuation\">-</span>Skyline.github.io</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> Here comes the update</pre></td></tr></table></figure><p>注：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 网站标题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 网站副标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 网站的描述</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 网站关键词</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 作者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 语言种类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 世界时区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 使用 Github Pages 就要写成 'https://github 的用户名.github.io'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git  <span class=\"token comment\"># 部署方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/Black<span class=\"token punctuation\">-</span>Skyline/Black<span class=\"token punctuation\">-</span>Skyline.github.io <span class=\"token comment\"># 仓库的地址 (网址)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main  <span class=\"token comment\"># 使用的 github 分支</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> Here comes the update  <span class=\"token comment\"># 每次部署成功后 GitHub 的仓库里出现的更新信息</span></pre></td></tr></table></figure><p>完成后，保存退出编辑，并开始部署：</p>\n<p>在 git 命令行中输入  <code>hexo d</code>  或  <code>hexo deploy</code>  ，成功的效果如下：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INFO  Validating config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INFO  Deploying: git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>INFO  Clearing .deploy_git folder...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INFO  Copying files from public folder...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INFO  Copying files from extend dirs...</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>warning: LF will be replaced by CRLF in 2022/10/23/hello-world/index.html.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>warning: LF will be replaced by CRLF in archives/2022/10/index.html.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>warning: LF will be replaced by CRLF in archives/2022/index.html.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>warning: LF will be replaced by CRLF in archives/index.html.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>warning: LF will be replaced by CRLF in css/fonts/fontawesome-webfont.svg.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>warning: LF will be replaced by CRLF in css/style.css.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.min.js.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>warning: LF will be replaced by CRLF in index.html.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>warning: LF will be replaced by CRLF in js/jquery-3.4.1.min.js.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>warning: LF will be replaced by CRLF in js/script.js.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>On branch master</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>nothing to commit, working tree clean</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Enumerating objects: 34, done.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Counting objects: 100% (34/34), done.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Delta compression using up to 12 threads</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Compressing objects: 100% (26/26), done.</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Writing objects: 100% (34/34), 882.38 KiB | 13.79 MiB/s, done.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Total 34 (delta 3), reused 0 (delta 0), pack-reused 0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>remote: Resolving deltas: 100% (3/3), done.</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>remote:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>remote: Create a pull request for <span class=\"token string\">'master'</span> on GitHub by visiting:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>remote:      https://github.com/Black-Skyline/Black-Skyline.github.io/pull/new/master</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>remote:</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>To https://github.com/Black-Skyline/Black-Skyline.github.io</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> * [new branch]      HEAD -> master</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>branch <span class=\"token string\">'master'</span> set up to track <span class=\"token string\">'https://github.com/Black-Skyline/Black-Skyline.github.io/master'</span>.</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>INFO  Deploy done: git</pre></td></tr></table></figure><p>注：可能会失败几次，大概率是因为与 github 的网络通信不太稳定，所以可多尝试几次</p>\n<p>部署成功后，GitHub 对应仓库的截图如下：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210231315277.jpg\" alt=\"提交部署后的仓库截图\" /></p>\n<p>此时博客可以对外访问了，在网址栏输入  <code>black-skyline.github.io</code>  即可访问</p>\n<h3 id=\"建立一个备份\"><a class=\"anchor\" href=\"#建立一个备份\">#</a> 建立一个备份</h3>\n<p>使用版本控制器  <code>git</code>  新建一个分支<strong> backup</strong> 用于备份本地文件：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token command\">$ git init</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Initialized empty Git repository in D:/HexoBlog/FirstBlog/.git/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>用户名@git命令行名 /d/HexoBlog/FirstBlog (master)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token command\">$ git add .</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>warning: LF will be replaced by CRLF in package-lock.json.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>warning: LF will be replaced by CRLF in package.json.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>The file will have its original line endings in your working directory</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>用户名@git命令行名 /d/HexoBlog/FirstBlog (master)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token command\">$ git commit<span class=\"token parameter\"> -m</span> </span><span class=\"token string\">\"first commit in local branch master\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>[master (root-commit) abc1925] first commit in local branch master</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> 11 files changed, 4331 insertions(+)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> create mode 100644 .github/dependabot.yml</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> create mode 100644 .gitignore</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> create mode 100644 _config.landscape.yml</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> create mode 100644 _config.yml</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> create mode 100644 package-lock.json</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> create mode 100644 package.json</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> create mode 100644 scaffolds/draft.md</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> create mode 100644 scaffolds/page.md</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> create mode 100644 scaffolds/post.md</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> create mode 100644 source/_posts/hello-world.md</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> create mode 100644 themes/.gitkeep</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>用户名@git命令行名 /d/HexoBlog/FirstBlog (master)</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token command\">$ git checkout<span class=\"token parameter\"> -b</span> backup</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Switched to a new branch <span class=\"token string\">'backup'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>用户名@git命令行名 /d/HexoBlog/FirstBlog (backup)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token command\">$ git add .</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>用户名@git命令行名 /d/HexoBlog/FirstBlog (backup)</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token command\">$ git commit<span class=\"token parameter\"> -m</span> </span><span class=\"token string\">\"first commit in local branch backup\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>On branch backup</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>nothing to commit, working tree clean</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>用户名@git命令行名 /d/HexoBlog/FirstBlog (backup)</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token command\">$ git branch<span class=\"token parameter\"> -l</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>* backup</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  master</pre></td></tr></table></figure><p>可以看到，有两个分支 <code>backup</code> 、 <code>master</code>  前者用于本地备份，后者用于提交部署；</p>\n<p>后面就是把本篇进行提交部署了.</p>\n<h1 id=\"level-22\"><a class=\"anchor\" href=\"#level-22\">#</a> Level 2.2 :</h1>\n<blockquote>\n<h6 id=\"一个简单的基于obs数据存储服务的图床搭建较为简略\"><a class=\"anchor\" href=\"#一个简单的基于obs数据存储服务的图床搭建较为简略\">#</a> 一个简单的基于 OBS 数据存储服务的图床搭建（较为简略）</h6>\n<h4 id=\"搭建方式-2\"><a class=\"anchor\" href=\"#搭建方式-2\">#</a> 搭建方式：</h4>\n<p><strong>华为云 OBS</strong> + <strong>PicGo</strong></p>\n<h4 id=\"材料准备-2\"><a class=\"anchor\" href=\"#材料准备-2\">#</a> 材料（准备）：</h4>\n<p>服务器：<strong>华为云 OBS</strong></p>\n<p>工具类：**PicGo **</p>\n</blockquote>\n<p>考虑到篇幅，这里就不对服务器端相关配置做相关介绍了，直接直入主题:</p>\n<blockquote>\n<h3 id=\"该怎么让你从本地放入markdwon文档的图片成为网络图片能从非本地看到\"><a class=\"anchor\" href=\"#该怎么让你从本地放入markdwon文档的图片成为网络图片能从非本地看到\">#</a> 该怎么让你从本地放入 MarkDwon 文档的图片成为 “网络图片”—— 能从非本地看到</h3>\n</blockquote>\n<h2 id=\"picgo\"><a class=\"anchor\" href=\"#picgo\">#</a> PicGO</h2>\n<h4 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h4>\n<h6 id=\"是什么\"><a class=\"anchor\" href=\"#是什么\">#</a> 是什么</h6>\n<p>一个软件，GitHub 上的开源项目，功能强大（具体可百度）</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210231346805.jpg\" alt=\"picgo是啥\" /></p>\n<h6 id=\"有啥用\"><a class=\"anchor\" href=\"#有啥用\">#</a> 有啥用</h6>\n<p>可以简单的理解为本地端与服务器端的<strong>中转站</strong>，本地图片可经由它发送到服务器成为网络图片</p>\n<h4 id=\"下载完后开始配置\"><a class=\"anchor\" href=\"#下载完后开始配置\">#</a> 下载完后开始配置</h4>\n<p>首先，如上图所说，本体式没有华为云的图床支持的，因此需要配置支持插件</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210231349119.jpg\" alt=\"picgo插件配置\" /></p>\n<p>然后进入<em><strong>图床设置</strong></em>：</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210231355234.jpg\" alt=\"华为云OBS图床设置\" /></p>\n<p>其中，第一行是由华为云服务器随机生成的一个类似于上传功能的” 接口账号 “。第二行就是对应的密码了，第五行就是图片在服务器里的存放目录。其他的均是在服务器的设置，不进行赘述。</p>\n<p>配置完成后可以去 “<em><strong>上传区</strong></em>” 试一试，这里就不作演示了。</p>\n<h2 id=\"typora-中设置picgo-图床实现图片自动上传\"><a class=\"anchor\" href=\"#typora-中设置picgo-图床实现图片自动上传\">#</a> Typora 中设置 PicGo 图床实现图片自动上传</h2>\n<h4 id=\"配置图像设置\"><a class=\"anchor\" href=\"#配置图像设置\">#</a> 配置图像设置</h4>\n<p>从左上角 “<strong>文件</strong>” 选项里点击 “<strong>偏好设置</strong>”，勾选上下图的选项</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210231407330.jpg\" alt=\"typora里的图像设置\" /></p>\n<h4 id=\"验证图片上传是否成功\"><a class=\"anchor\" href=\"#验证图片上传是否成功\">#</a> 验证图片上传是否成功</h4>\n<p>点击上图的 “<strong>验证图片上传选项</strong>”，等待一下，如果出现 PicGo 的上传成功提示，那就算配置成功</p>\n<p><img data-src=\"https://obssh.obs.cn-east-3.myhuaweicloud.com/img_xunguang/202210231411184.jpg\" alt=\"typora上传验证\" /></p>\n",
            "tags": [
                "red_rock first_homework level 0 ~ level 2.2"
            ]
        },
        {
            "id": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/10/23/hello-world/",
            "url": "https://github.com/Black-Skyline/Black-Skyline.github.io/2022/10/23/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-23T05:04:30.354Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}